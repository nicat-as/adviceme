<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.uniso.equso.dao.repository.mapper.PostMapper">

    <insert id="createPost">
        insert into post(text, creator_id, wall_user_id, post_category_id, status)
        values (#{request.text}, #{userId}, #{request.wallUserId}, #{request.categoryId}, #{status})
    </insert>

    <select id="getPostById" resultMap="post">
        select p.id                                              as ID,
               p.text                                            as TEXT,
               p.creator_id                                      as CREATOR_ID,
               (select name from "user" where id = p.creator_id) as CREATOR_NAME,
               p.wall_user_id                                    as WALL_USER_ID,
               wu.name                                           as WALL_USER_NAME,
               c.id                                              as CATEGORY_ID,
               c.text                                            as CATEGORY_NAME
        from post p
                 join post_categories c on c.id = p.post_category_id
                 left join "user" wu on wu.id = p.wall_user_id
        where p.id = #{postId}
          and p.creator_id = #{userId}
          and p.status = #{status}
          and c.status = #{status}
          and wu.status = #{status}
    </select>

    <resultMap id="post" type="com.uniso.equso.model.PostDto">
        <result column="ID" property="id"/>
        <result column="TEXT" property="text"/>
        <result column="CREATOR_ID" property="creator.id"/>
        <result column="CREATOR_NAME" property="creator.name"/>
        <result column="WALL_USER_ID" property="wallUser.id"/>
        <result column="WALL_USER_NAME" property="wallUser.name"/>
        <result column="CATEGORY_ID" property="category.id"/>
        <result column="CATEGORY_NAME" property="category.name"/>
    </resultMap>

    <select id="getPostsByCriteria" resultMap="post">
        select
        p.id as ID,
        p.text as TEXT,
        p.creator_id as CREATOR_ID,
        (select name from "user" where id = p.creator_id) as CREATOR_NAME,
        p.wall_user_id as WALL_USER_ID,
        wu.name as WALL_USER_NAME,
        c.id as CATEGORY_ID,
        c.text as CATEGORY_NAME
        from post p
        join post_categories c on c.id = p.post_category_id
        left join "user" wu on wu.id = p.wall_user_id
        where p.creator_id = #{userId}
            and p.status = #{status}
            and c.status = #{status}
            and wu.status = #{status}
        <if test="!(criteria.text == null or criteria.text.isEmpty())">
            and p.text ilike '%'|| #{criteria.text} || '%'
        </if>
        <if test="!(criteria.categoryName == null or criteria.categoryName.isEmpty())">
            and c.text ilike '%'|| #{criteria.categoryName} || '%'
        </if>
        <if test="!(criteria.wallUserId == null)">
            and wu.id = #{criteria.wallUserId}
        </if>
        order by
        <choose>
            <when test="criteria.sortBy==null">
                p.created_at
            </when>
            <otherwise>
                ${criteria.sortBy.value}
            </otherwise>
        </choose>
        <choose>
            <when test="criteria.orderBy!=null and criteria.orderBy.value=='desc'">
                desc
            </when>
            <otherwise>
                asc
            </otherwise>
        </choose>
        limit
        <choose>
            <when test="isZero">10</when>
            <otherwise>#{criteria.maxCount}</otherwise>
        </choose>
        offset
        <choose>
            <when test="criteria.page&lt;0">0</when>
            <otherwise>#{criteria.page}</otherwise>
        </choose>
    </select>
</mapper>